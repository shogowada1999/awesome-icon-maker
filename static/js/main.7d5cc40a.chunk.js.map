{"version":3,"sources":["App.js","index.js"],"names":["minutes","Date","getMinutes","season","getSeason","timePart","getTimePart","defineDefaultColor","styleType","iconAnger","iconDisgust","iconFear","iconHappiness","iconSorrow","iconSurprise","App","props","handleChangeColor","e","pickerType","target","id","newColor","value","setState","iconColor","backgroundColor","borderColor","handleChangeCurrentIcon","newIcon","updateCurrentIcon","handleChangeIconSize","newSize","iconSize","onClickExport","state","isProcessing","document","getElementById","html2canvas","then","canvas","targetImgUri","toDataURL","saveAsImage","setTimeout","uri","downloadLink","createElement","fileName","makeFileName","download","href","body","appendChild","click","removeChild","window","open","selectRandomIcon","iconEmotion","currentIcon","iconName","typeOfEmotion","Math","floor","random","length","this","match","replace","emotion","className","onClick","type","placeholder","onChange","maxLength","min","max","fontSize","viewerStyle","circleStyle","iconStyle","color","style","name","Container","Row","Col","xs","span","order","md","renderButtons","renderIconViewer","renderEditor","renderDownloadButton","React","Component","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.7d5cc40a.chunk.js","sourcesContent":["import React from 'react';\nimport html2canvas from 'html2canvas';\nimport { Container, Row, Col } from 'react-bootstrap';\nimport './css/header.min.css';\nimport './css/buttons.min.css';\nimport './css/viewer.min.css';\nimport './css/footer.min.css';\n\nvar now = new Date();\nvar minutes = now.getMinutes();\n\n// 起動時の時刻から対応する季節を文字列で返す\nfunction getSeason(minutes){\n    if(typeof(minutes) !== 'number') return;\n\n    if(minutes >= 0 && minutes < 15){\n        return \"winter\";\n    }else if(minutes >= 15 && minutes < 30){\n        return \"spring\";\n    }else if(minutes >= 30 && minutes < 45){\n        return \"summer\";\n    }else if(minutes >= 45 && minutes < 60){\n        return \"autumn\";\n    }else{\n        return;\n    }\n}\n\n// 起動時の時刻から季節の初期・中期・後期を文字列で返す\nfunction getTimePart(minutes){\n    if(typeof(minutes) !== 'number') return;\n\n    let timePart;\n\n    if(minutes > 45){\n        timePart = minutes - 45;\n    }else if(minutes > 30){\n        timePart = minutes - 30;\n    }else if(minutes > 15){\n        timePart = minutes - 15;\n    }else{\n        timePart = minutes;\n    }\n\n    if(timePart >= 0 && timePart < 5){\n        return \"time-first\";\n    }else if(timePart >= 5 && timePart < 10){\n        return \"time-second\";\n    }else if(timePart >= 10 && timePart <= 15){\n        return \"time-third\";\n    }else{\n        return;\n    }\n}\n\nconst season   = getSeason(minutes);\n// const season = \"winter\";\n// const season = \"spring\";\n// const season = \"summer\";\n// const season = \"autumn\";\n\nconst timePart = getTimePart(minutes);\n// const timePart = \"time-first\";\n\n// 現在の季節と装飾場所に対応する色を文字列で返す\nfunction defineDefaultColor(styleType){\n    if(typeof(styleType) !== 'string') return;\n\n    if(season === \"winter\" && styleType === \"icon\"){\n        return \"#536DFE\";\n    }else if(season === \"winter\" && styleType === \"background\"){\n        return \"#CFD8DC\";\n    }else if(season === \"winter\" && styleType === \"border\"){\n        return \"#BDBDBD\";\n    }else if(season === \"spring\" && styleType === \"icon\"){\n        return \"#FFEB3B\";\n    }else if(season === \"spring\" && styleType === \"background\"){\n        return \"#689F38\";\n    }else if(season === \"spring\" && styleType === \"border\"){\n        return \"#BDBDBD\";\n    }else if(season === \"summer\" && styleType === \"icon\"){\n        return \"#FFC107\";\n    }else if(season === \"summer\" && styleType === \"background\"){\n        return \"#0097A7\";\n    }else if(season === \"summer\" && styleType === \"border\"){\n        return \"#BDBDBD\";\n    }else if(season === \"autumn\" && styleType === \"icon\"){\n        return \"#FF5722\";\n    }else if(season === \"autumn\" && styleType === \"background\"){\n        return \"#D7CCC8\";\n    }else if(season === \"autumn\" && styleType === \"border\"){\n        return \"#BDBDBD\";\n    }else{\n        return;\n    }\n}\n\n// ランダム表示されるアイコンセット\nconst iconAnger     = [\"fas fa-angry\", \"fas fa-fire\", \"fas fa-pepper-hot\"];\nconst iconDisgust   = [\"fas fa-frown\", \"fas fa-bug\", \"fas fa-viruses\"];\nconst iconFear      = [\"fas fa-dizzy\", \"fas fa-ghost\", \"fas fa-skull\"];\nconst iconHappiness = [\"fas fa-smile\", \"fas fa-gift\", \"fas fa-heart\"];\nconst iconSorrow    = [\"fas fa-sad-tear\", \"fas fa-cloud-rain\", \"fas fa-user-injured\"];\nconst iconSurprise  = [\"fas fa-surprise\", \"fas fa-magic\", \"fas fa-bomb\"];\n\nclass App extends React.Component{\n    constructor(props){\n        super(props);\n        this.state = {\n            iconName: \"fas fa-question\",\n            iconColor: defineDefaultColor(\"icon\"),\n            backgroundColor: defineDefaultColor(\"background\"),\n            borderColor: defineDefaultColor(\"border\"),\n            iconSize: 145,\n            isProcessing: false,\n        }\n    }\n\n    // METHOD ==============================================================================================\n\n    // 各カラーピッカーに対応したアイコンパーツの色を変える\n    handleChangeColor = (e) => {\n        const pickerType = e.target.id;\n        const newColor = e.target.value;\n        \n        if(pickerType === 'color-icon'){\n            this.setState({\n                iconColor: newColor,\n            });\n        }else if(pickerType === 'color-background'){\n            this.setState({\n                backgroundColor: newColor,\n            });\n        }else if(pickerType === 'color-border'){\n            this.setState({\n                borderColor: newColor,\n            });\n        }else{\n            return null;\n        }\n    }\n\n    // アイコン固有のclassNameを受け取り対応するアイコンを変化させる\n    handleChangeCurrentIcon = (e) => {\n        const newIcon = e.target.value;\n        this.updateCurrentIcon(newIcon);\n    }\n\n    // レンジバーの値を受け取りアイコンのサイズを変化させる\n    handleChangeIconSize = (e) => {\n        const newSize = e.target.value;\n\n        this.setState({\n            iconSize: newSize,\n        });\n    }\n\n    // 表示中のアイコンに対応するファイル名を生成\n    makeFileName(){\n        const iconName = this.state.iconName;\n        let fileName;\n        if(iconName.match(/fas fa-/)){\n            fileName = iconName.replace(/fas fa-/g, \"\");\n        }else if(iconName.match(/fab fa-/)){\n            fileName = iconName.replace(/fab fa-/g, \"\");\n        }else{\n            fileName = \"your_icon\";\n        }\n        return fileName;\n    }\n\n    // アイコンビュアーをcanvasとして画像に変換する\n    onClickExport = () => {\n        const isProcessing = this.state.isProcessing;\n        if(isProcessing === true) return;\n\n        this.setState({\n            isProcessing: true,\n        });\n\n        const target = document.getElementById(\"target-component\");\n        html2canvas(target).then(canvas => {\n            const targetImgUri = canvas.toDataURL(\"img/png\");\n            this.saveAsImage(targetImgUri);\n        });\n\n        setTimeout(() => {\n            this.setState({\n                isProcessing: false,\n            });\n        }, 2000);\n    }\n\n    // 画像をブラウザ上でダウンロードする\n    saveAsImage = (uri) => {\n        const downloadLink = document.createElement(\"a\");\n\n        const fileName = this.makeFileName();\n        \n        if(typeof(downloadLink.download) === \"string\"){\n            downloadLink.href = uri;\n            downloadLink.download = \"icon_\" + fileName + \".png\";\n            document.body.appendChild(downloadLink);\n            downloadLink.click();\n            document.body.removeChild(downloadLink);\n        }else{\n            window.open(uri);\n        }\n    }\n\n    // クリックされたボタンのIDに応じてランダムなアイコンを表示させる\n    selectRandomIcon = (e) => {\n        const currentIcon = this.state.iconName;\n        const typeOfEmotion = e.target.id;\n        let iconEmotion;\n        let newIcon = null;\n        \n        if(typeOfEmotion === \"ANGER\"){\n            iconEmotion = iconAnger;\n        }else if(typeOfEmotion === \"DISGUST\"){\n            iconEmotion = iconDisgust;\n        }else if(typeOfEmotion === \"FEAR\"){\n            iconEmotion = iconFear;\n        }else if(typeOfEmotion === \"HAPPINESS\"){\n            iconEmotion = iconHappiness;\n        }else if(typeOfEmotion === \"SORROW\"){\n            iconEmotion = iconSorrow;\n        }else if(typeOfEmotion === \"SURPRISE\"){\n            iconEmotion = iconSurprise;\n        }else{\n            return null;\n        }\n\n        while(currentIcon === newIcon || newIcon === null){\n            newIcon = iconEmotion[Math.floor(Math.random() * iconEmotion.length)];\n        }\n\n        this.updateCurrentIcon(newIcon);\n    }\n\n    // 新しいアイコン固有のclassNameを文字列で受け取りアイコンのstateを更新する\n    updateCurrentIcon(newIcon){\n        if(typeof(newIcon) !== \"string\") return;\n        \n        this.setState({\n            iconName: newIcon,\n        });\n    }\n\n    // RENDER ==============================================================================================\n\n    // ランダムボタンの描画\n    renderButtons(emotion){\n        if(typeof(emotion) !== 'string'){\n            return null;\n        }\n\n        return(\n            <button \n                id={emotion}\n                className={\n                    emotion + \" \" +\n                    season + \" \" +\n                    timePart + \" \" +\n                    \"button\"\n                }\n                onClick={this.selectRandomIcon}\n                data-testid=\"emotion-button\"\n            >{emotion}</button>\n        );\n    }\n\n    // ダウンロードボタンの描画\n    renderDownloadButton(){\n        return(\n            <button \n                id=\"download_button\"\n                onClick={this.onClickExport}\n                className={\n                    season + \" \" +\n                    timePart + \" \" +\n                    \"button download\"\n                }\n                data-testid=\"download\"\n                // disabled\n            >DOWNLOAD</button>\n        );\n    }\n\n    // エディターの描画\n    renderEditor(){\n        const iconName = this.state.iconName;\n        const iconColor = this.state.iconColor;\n        const backgroundColor = this.state.backgroundColor;\n        const borderColor = this.state.borderColor;\n        const iconSize = this.state.iconSize;\n\n        return(\n            <div>\n                <div className=\"icon-name\">\n                    <input \n                        className={season} \n                        type=\"text\" \n                        placeholder=\"Enter any class name of fa-icon.\"\n                        value={iconName} \n                        onChange={this.handleChangeCurrentIcon} \n                        maxLength=\"30\"\n                        data-testid=\"icon-name\"\n                    />\n                </div>\n                <div className=\"color-picker\">\n                    <div>\n                        <input \n                            id=\"color-icon\" \n                            type=\"color\" \n                            value={iconColor} \n                            onChange={this.handleChangeColor} \n                            data-testid=\"color-icon\"\n                        />\n                    </div>\n                    <div>\n                        <input \n                            id=\"color-background\" \n                            type=\"color\" \n                            value={backgroundColor} \n                            onChange={this.handleChangeColor} \n                            data-testid=\"color-background\"\n                        />\n                    </div>\n                    <div>\n                        <input \n                            id=\"color-border\" \n                            type=\"color\" \n                            value={borderColor} \n                            onChange={this.handleChangeColor} \n                            data-testid=\"color-border\"\n                        />\n                    </div>\n                </div>\n                <div className=\"range-wrap\">\n                    <input \n                        type=\"range\" \n                        value={iconSize} \n                        min=\"40\" \n                        max=\"250\" \n                        onChange={this.handleChangeIconSize} \n                        data-testid=\"icon-size\"\n                    />\n                </div>\n            </div>\n        );\n    }\n\n    // アイコンビュアーの描画\n    renderIconViewer(){\n        const currentIcon = this.state.iconName;\n        const fontSize = this.state.iconSize + \"%\";\n\n        const viewerStyle = {\n            borderColor: this.state.borderColor,\n            backgroundColor: this.state.backgroundColor,\n        }\n\n        const circleStyle = {\n            backgroundColor: this.state.backgroundColor,\n        }\n\n        const iconStyle = {\n            color: this.state.iconColor,\n            fontSize: fontSize,\n        }\n    \n        return(\n            <div \n                id=\"target-component\"\n                className={\n                    season + \" \" +\n                    timePart + \" \" +\n                    \"icon-viewer\" \n                }\n                style={viewerStyle}\n                data-testid=\"icon-viewer\"\n            >\n                <div className=\"black-wrapper\">\n                    <div className=\"circle-wrapper\" style={circleStyle}>\n                        <i \n                            className={currentIcon} \n                            style={iconStyle} \n                            data-testid=\"icon-element\"\n                            name={currentIcon}\n                        ></i>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n\n    // 全体の描画\n    render(){ \n        return(\n            <div className={\n                season + \" \" +\n                \"whole-wrap\"\n            }>\n                <Container>\n                    <Row>\n                        <header className={season + \" \" + timePart}>\n                            <div>\n                                <h1 className={season + \" \" + timePart}>Awesome Icon Maker by Font Awesome</h1>\n                            </div>\n                            <div>\n                                <small className={season + \" \" + timePart} data-testid=\"copyright\">created by Shogo Wada</small>\n                            </div>\n                        </header>\n                    </Row>\n                    <Row className={\n                        season + \" \" +\n                        timePart + \" \" +\n                        \"main-part\"\n                    }>\n                        <Col \n                            xs={{span: 6, order: 1}}\n                            md={{span: 3, order: 1}}\n                        >\n                            <div className=\"button-box box-left\">\n                                {this.renderButtons(\"ANGER\")}\n                                {this.renderButtons(\"DISGUST\")}\n                                {this.renderButtons(\"FEAR\")}\n                            </div>\n                        </Col>\n                        <Col\n                            xs={{span: 12, order: 3}}\n                            md={{span: 6, order: 2}}\n                        >\n                            <div className=\"viewer\">\n                                {this.renderIconViewer()}\n                                {this.renderEditor()}\n                                {this.renderDownloadButton()}\n                            </div>\n                        </Col>\n                        <Col\n                            xs={{span: 6, order: 2}}\n                            md={{span: 3, order: 3}}\n                        >\n                            <div className=\"button-box box-right\">\n                                {this.renderButtons(\"HAPPINESS\")}\n                                {this.renderButtons(\"SORROW\")}\n                                {this.renderButtons(\"SURPRISE\")}\n                            </div>\n                        </Col>\n                    </Row>\n                    <Row>\n                       <footer className={season + \" \" + timePart} data-testid=\"footer\">\n                           <small>\n                               Attribution notation : <a href=\"https://fontawesome.com/license/free\" className={season}>Font Awesome Free License</a> , <a href=\"https://creativecommons.org/licenses/by/4.0/\" className={season}>CC BY 4.0 License</a>\n                           </small>\n                       </footer>\n                    </Row>\n                </Container>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './css/index.min.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}